Система смены оружия в игре «TIMELOOP» построена с использованием нескольких архитектурных паттернов, которые обеспечивают модульность, гибкость и расширяемость системы. Основные паттерны, используемые в этой системе, включают абстрактную фабрику (Abstract Factory), стратегию (Strategy) и инъекцию зависимостей (Dependency Injection). Рассмотрим каждый из этих паттернов и их применение в контексте системы смены оружия.
Паттерн абстрактная фабрика используется для создания семейств связанных объектов без указания их конкретных классов. В контексте системы смены оружия этот паттерн реализован в классе WeaponFactory, представленном в листинге А.2.
WeaponFactory отвечает за создание экземпляров оружия на основе данных, предоставленных в WeaponData, в зависимости от типа и подтипа оружия, фабрика создает соответствующие объекты оружия и добавляет к ним нужные компоненты.
Паттерн стратегия позволяет определять семейство алгоритмов, инкапсулировать каждый из них и делать их взаимозаменяемыми. В системе смены оружия этот паттерн используется для различных типов оружия, которые наследуются от базового класса Weapon, представленном в листинге А.1, и реализуют свои собственные методы Fire, AreaFire и Finisher.
Weapon является абстрактным базовым классом для всех видов оружия, от которого наследуются класс типов оружия, например, огнестрельного и холодного (FirearmWeapon (представлен в листинге А.4), ColdWeapon), определяющий интерфейс для методов стрельбы, конкретные реализации наследуемые от FirearmWeapon, такие как PistolWeapon, RifleWeapon, ShotgunWeapon, определяют специфическое поведение для каждого типа оружия. Класс RifleWeapon представлен в листинге А.5.
Паттерн инъекция зависимостей используется для уменьшения жесткой связанности между классами и улучшения тестируемости. В системе смены оружия это реализовано с помощью Zenject, который управляет зависимостями между компонентами.
Зависимость от WeaponFactory внедряется через метод Construct, что позволяет легко менять фабрику оружия, если это необходимо.
Система смены оружия состоит из нескольких ключевых компонентов, которые работают вместе, чтобы обеспечить гибкость и расширяемость. Рассмотрим основные компоненты системы смены оружия, представленные в таблице 1 и их взаимодействие, представленное на рисунке 1.
Таблица 1 – Описание классов системы оружия
Класс	Роль
Weapon	Базовый абстрактный класс для всех видов оружия, определяющий интерфейс для методов.
WeaponData	ScriptableObject, содержащий данные и настройки для оружия.
WeaponFactory	Класс фабрики, отвечающий за создание экземпляров оружия на основе WeaponData.
WeaponController	Класс, управляющий текущим оружием персонажа, обеспечивающий функциональность смены оружия.
AimRigController	Класс, отвечающий за настройку системы прицеливания анимации.


Рисунок 1 – Частичная диаграмма классов системы оружия
WeaponController, представленный в листинге А.3, инициализируется с помощью WeaponFactory, инъектируемой через Zenject, также WeaponFactory используется для создания экземпляров оружия по мере необходимости.
При вызове метода ChangeWeapon в WeaponController текущий экземпляр оружия удаляется (если он существует), после чего WeaponFactory создает новый экземпляр оружия на основе данных WeaponData, а новый экземпляр оружия сохраняется в поле _currentWeapon, и его настройки обновляются через метод SetWeaponPlayerSettings.
Метод SetWeaponPlayerSettings обновляет UI элементы и систему прицеливания в соответствии с новым оружием, в зависимости от типа оружия, система прицеливания настраивается с помощью AimRigController.
AimRigController позволяет использовать инструмент Unity, называемый «Animation Rigging» для динамической настройки анимации, в проекте это используется для того, чтобы персонаж визуально следил за целью и целился именно в неё автоматически.
Система смены оружия в «TIMELOOP» использует несколько архитектурных паттернов для обеспечения модульности, гибкости и расширяемости. Паттерн абстрактная фабрика позволяет легко создавать новые виды оружия, паттерн стратегия обеспечивает возможность определения и использования различных методов стрельбы для каждого типа оружия, а инъекция зависимостей уменьшает жесткую связанность между классами и улучшает тестируемость системы. Взаимодействие между компонентами системы обеспечивает плавную смену оружия и обновление настроек персонажа в зависимости от выбранного оружия.
Система добиваний в игре «TIMELOOP» представляет собой механизм, позволяющий игроку выполнять специальные атаки (добивания) на врагах, находящихся в определенном состоянии, после добивания из противника гарантированно выпадают усиления. Эта система включает несколько ключевых классов, взаимодействующих друг с другом для обеспечения плавного и эффектного выполнения добиваний. Рассмотрим основные компоненты системы добивания, представленные в таблице 2 и их взаимодействие, представленное на рисунке 2.
Таблица 2– Описание классов системы добивания
Класс	Роль
FinisherzoneHandler	Обнаруживает врагов, которые могут быть добиты, и активирует режим готовности к добиванию.
AnimationEventsHolder	Управляет анимацией и визуальными эффектами, связанными с добиванием.
FinisherWeapon	Специализированное оружие для выполнения добиваний.


Рисунок 2 – Частичная диаграмма классов добивания

FinisherzoneHandler, представленный в листинге А.6, работает в следующем порядке:
1.	При входе врага в зону действия проверяется, является ли он доступным для добивания с помощью интерфейса IFinisherable, который представлен в листинге А.7.
2.	Если враг готов к добиванию, вызывается событие, уведомляющее персонажа игрока о возможности выполнения добивания.
3.	Если враг становится недоступным для добивания или выходит из зоны действия, режим готовности к добиванию деактивируется.
Также FinisherzoneHandler использует паттерн наблюдатель для того, чтобы отслеживать состояние врагов, которые могут быть добиты, это происходит следующим образом: 
1.	FinisherzoneHandler подписывается на события целей (врагов) через интерфейс IFinisherable, такие как готовность к добиванию и завершение добивания.
2.	Когда цель становится доступной для добивания, FinisherzoneHandler уведомляет другие компоненты системы о возможности выполнения добивания.
Когда начинается работа метода StartFinisher класса AnimationEventsHolder, который представлен в листинге А.8, выполняется следующий алгоритм действий:
1.	Персонаж становится неуязвимым.
2.	Включается эффект замедления времени для всех объектов, кроме цели.
3.	Изменяются параметры камеры и эффекты пост-обработки для создания драматического эффекта.
4.	Запускается анимация добивания.
Unity предоставляет возможность установки событий на определенные моменты анимации, благодаря этому, когда анимация подходит к концу, вызывается метод EndFinisher, который вызывается при окончании анимации, срабатывает алгоритм окончания добивания:
1.	Время возвращается к нормальному ходу.
2.	Персонаж становится уязвимым.
3.	Восстанавливаются параметры камеры и эффекты.
4.	Персонаж возвращается к обычному состоянию.
AnimationEventsHolder использует паттерн инъекции зависимостей для передачи компонентов, таких как эффекты пост-обработки, что позволяет легко изменять и тестировать эти компоненты.
FinisherWeapon, представленный в листинге А.9, реализует методы, необходимые для выполнения добивания на цели, при активации добивания вызывает соответствующие методы цели, чтобы начать процесс добивания, например, вызываемый метод запускает нужную анимацию цели и запускает для неё дополнительную логику.
FinisherWeapon является частью паттерна стратегия так как наследует методы от базового класса оружия и переопределяет их для выполнения специфических действий добивания. Это позволяет использовать разные виды оружия с различным поведением при выполнении добиваний.
Система усилений в игре «TIMELOOP» позволяет игроку получать бонусы, например, такие как восстановление здоровья, после уничтожения врагов. Эта система состоит из нескольких компонентов, каждый из которых играет свою роль в создании, выпадении и применении усилений. Рассмотрим основные компоненты системы усилений, представленные в таблице 3 и их взаимодействие, представленное на рисунке 3.
Таблица 3 – Описание классов системы усилений
Класс	Роль
BuffLoot	Отвечает за генерацию усилений при уничтожении врагов.
Buff	Базовый класс, от которого наследуются усиления.


Рисунок 3– Частичная диаграмма классов усиления

Класс BuffLoot, который продемонстрирован в листинге А.10, отвечает за создание и выбрасывание усилений в игровом пространстве. При вызове метода DropBuff, он случайным образом определяет количество усилений, которые будут выброшены, в пределах от 1 до заданного максимального значения. Затем, для каждого усиления создается его экземпляр в позиции с использованием префаба. После этого каждому созданному усилению придается случайное направление и сила движения с помощью компонента физики Rigidbody, который встроен в Unity, чтобы усиления разлетелись в случайных направлениях, используя метод AddForce с указанной силой и режимом импульса.
Класс Buff, представленный в листинге А.11, является базовым классом для усилений в игре. Он управляет их поведением после создания. Метод Start у этих объектов запускает сопрограмму для активации коллайдера через 0.5 секунды, что позволяет усилению взаимодействовать с игроком после небольшой задержки. Усиления существуют n секунд, в это время у них проигрывается анимация вращения и левитирования, реализованная благодаря библиотеке DOTween. По истечении времени существования усиления самоуничтожаются.
Метод OnTriggerEnter срабатывает при столкновении с другими объектами. Если усиление сталкивается с игроком (объект с тегом «Player»), он сохраняет ссылку на позицию игрока в поле и вызывает метод FollowPlayer.
Метод FollowPlayer в базовом классе не содержит логики, оставляя её реализацию для подклассов, которые могут переопределить его для добавления специфического поведения следования, после чего при достижении усилением игрока, оно применяется.
Система усилений в игре «TIMELOOP» обеспечивает динамическое и случайное выпадение бонусов после уничтожения врагов, что стимулирует игрока к активным действиям. Архитектурные решения, такие как наследование от базового класса Buff для создания дочерних классов со своей реализацией делают систему гибкой и легко расширяемой. В результате игрок получает дополнительные возможности для выживания и повышения эффективности в бою, что добавляет глубину и интерес к игровому процессу.
