Для уровня индикатора используется компонент TilemapEraser. Tilemap Eraser является компонентом, который обеспечивает постепенное удаление тайлов карт. Этот процесс демонстрирует прогресс на уровне, демонстрируя игроку, как он продвигается, таким образом является диегетическим интерфейсом, который мы уже говорили раньше. Подробно рассмотрим код и диаграмма классов, а также каждую их часть. В диаграмме классов показаны связи классов WAVESPAWNER, WAVE, Tilemap Eraser и используемых методов данных.
 
Рисунок 7 - Диаграмма классов WaveSpawner, Wave, TilemapEraser

Поля класса:
	Tilemap tilemap: объект Tilemap, который содержит все тайлы, подлежащие стиранию.
	Vector3Int startPoint: начальная точка стирания.
	int initialRadius: начальный радиус стирания.
	float timer: интервал времени между увеличением радиуса стирания.
	int currentRadius: текущий радиус стирания, который изменяется с течением времени.
Метод Start вызывается при инициализации скрипта. В нём задаётся начальный радиус стирания равным значению initialRadius.
EraseTilesWithIncreasingRadius — это корутина, которая постепенно увеличивает радиус стирания и вызывает метод EraseTilesInCircle для стирания тайлов в новом радиусе через определённые интервалы времени, представлена в листинге 1.

Листинг 1 – EraseTilesWithIncreasingRadius
IEnumerator EraseTilesWithIncreasingRadius()
{
    while (true)
    {
        EraseTilesInCircle(startPoint, currentRadius);
        currentRadius += 1;
        yield return new WaitForSeconds(timer);
    }
}

EraseTilesInCircle стирает тайлы в пределах заданного радиуса от начальной точки. Метод использует алгоритм обхода в ширину (BFS) для посещения всех тайлов в круге заданного радиуса.
BFS обходит граф уровнем за уровнем, начиная с исходной вершины. Он сначала посещает все вершины на текущем уровне, затем переходит к следующему уровню и так далее. В контексте Tilemap это означает, что BFS начнет стирание с начальной точки и будет постепенно расширять область стирания до заданного радиуса.
В методе EraseTilesInCircle BFS используется для обхода всех тайлов в пределах круга заданного радиуса от начальной точки. Давайте рассмотрим этот метод более подробно в Листинге 1:

Листинг 2 – Метод EraseTilesInCircle
void EraseTilesInCircle (Vector3Int start, int radius)
{
    // Очередь для хранения тайлов, которые нужно посетить
    Queue<Vector3Int> queue = new Queue<Vector3Int> ();
    // Множество для хранения уже посещённых тайлов
    HashSet<Vector3Int> visited = new HashSet<Vector3Int> ();
    // Добавляем начальную точку в очередь
    queue.Enqueue(start);
    // Пока в очереди есть точки для посещения
    while (queue.Count > 0)
    {
   // Извлекаем текущую точку из очереди
        Vector3Int current = queue.Dequeue();
   // Если точка ещё не посещена и находится в пределах круга
        If(!visited.Contains(current)&&sWithinCircle(start, radius, current))
        {
   // Стираем тайл в текущей точке
            tilemap.SetTile(current, null);
   // Добавляем текущую точку в множество посещённых
            visited.Add(current);
   // Получаем соседние точки
            Vector3Int[] neighbors = GetNeighbors(current);
	// Добавляем соседние точки в очередь для дальнейшего посещения
            foreach (Vector3Int neighbor in neighbors)
            {
                queue.Enqueue(neighbor);
            }
        }
    }
}

Этот алгоритм гарантирует, что все тайлы в пределах круга будут стёрты, начиная с начальной точки и постепенно расширяя область стирания, что визуально показывает прогресс выполнения уровня.
IsWithinCircle проверяет, находится ли заданная точка в пределах круга с центром в указанной точке и заданным радиусом. Для этого вычисляется расстояние от центра до точки и сравнивается с радиусом.
GetNeighbors возвращает массив соседних точек для данной точки. Эти точки находятся по четырём основным направлениям (вверх, вниз, влево, вправо).
StartEraser запускает корутину EraseTilesWithIncreasingRadius, начиная процесс постепенного стирания тайлов, как только закончится таймер начала волны.
Этот компонент помогает визуализировать прогресс прохождения уровня, добавляя динамическое изменение игрового поля по мере выполнения задач. Игрок видит, как постепенно стираются тайлы, что сигнализирует об успешном продвижении в игре, а также увеличивает вовлеченность в игровой процесс.
3.3	Реализация боевой системы
При разработке боевой системы в проекте TDRPG мы создали базовый класс героя, от которого легко наследуются другие герои с уникальными характеристиками и способностями. Это позволяет значительно упростить процесс расширения и модификации проекта. Ниже рассмотрим реализацию базового класса Turret и одного из его наследников, GunnerTurret, AlchemistTurret с пояснением основных методов.
Базовый класс Turret служит основой для всех типов героев. Он включает основные параметры, такие как урон, дальность атаки, скорость стрельбы, и методы для поиска целей и стрельбы.
Метод Awake вызывается сразу после инициализации объекта и до метода Start. В этом методе происходит получение компонента ExpManager, который управляет опытом героя.
UpdateTarget (листинг 3) метод обновляет текущую цель героя, находя ближайшего врага в пределах дальности атаки. Он перебирает всех врагов в игре, вычисляет расстояние до каждого из них и выбирает ближайшего в пределах дальности действия.

Листинг 3 – UpdateTarget метод базового класса
protected void UpdateTarget()
{
GameObject[] enemies = GameObject.FindGameObjectsWithTag(enemyTag);
    float shortestDistance = Mathf.Infinity;
    GameObject nearestEnemy = null;
    foreach (GameObject enemy in enemies)
    {
        float distanceToEnemy = Vector3.Distance(transform.position, enemy.transform.position);
        if (distanceToEnemy < shortestDistance)
        {
            shortestDistance = distanceToEnemy;
            nearestEnemy = enemy;
        }
    }
    if (nearestEnemy != null && shortestDistance <= range)
    {
        target = nearestEnemy.transform;
    }
    else
    {
        target = null;
    }
}

Метод Update (листинг 4) вызывается каждый кадр и выполняет основную логику атаки героя. Если цель существует, он поворачивает героя в направлении цели и инициирует стрельбу, если прошел достаточный промежуток времени с последнего выстрела, так реализована скорость атаки героя.

Листинг 4 – Update метод базового класса
void Update()
{
    if (target == null)
    {
        return;
    }
    Vector3 dir = target.position - transform.position;
    Quaternion toRotation = Quaternion.LookRotation(Vector3.forward, dir);
    partToRotate.transform.rotation = Quaternion.RotateTowards(partToRotate.transform.rotation, toRotation, turnSpeed * Time.deltaTime);
    float scaleX = Mathf.Sign(dir.x);
    transform.localScale = new Vector3(scaleX, 1f, 1f);
    if (fireCountdown <= 0f)
    {
        Shoot();
        fireCountdown = 1f / fireRate;
    }
    fireCountdown -= Time.deltaTime;
}

Метод Shoot, который указан в листинге 5, создает снаряд и запускает его в направлении цели. Он создает префаб снаряда, передает ему параметры урона и радиуса взрыва, а затем запускает метод Seek для отслеживания цели, сам скрипт снаряда включает в себя переменные для скорости пули, урона, радиуса взрыва, эффекта при попадании и владельца пули (героя). Метод Seek устанавливает цель для пули. В методе Update пуля проверяет наличие цели, перемещается к ней и вращается в её направлении. При попадании в цель вызывается метод HitTarget, который создает эффект попадания, вызывает функцию взрыва или наносит урон цели. Метод Explode наносит урон всем врагам в радиусе взрыва. Метод Damage наносит урон конкретному врагу.


Листинг 5 – метод Shoot
protected void Shoot()
{
    GameObject bulletGO = (GameObject)Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
    Bullet bullet = bulletGO.GetComponent<Bullet>();
        
    if (bullet != null)
    {
        bullet.owner = this;
        bullet.explosionRadius = explosiveRadius;
        bullet.damage = damage;
        bullet.Seek(target);
    }
}

OnDrawGizmosSelected метод рисует визуальную индикацию радиуса атаки героя в редакторе Unity. Он помогает нам видеть диапазон атаки героя при настройке уровня и совершенствовании дерева прокачки.
Метод StatsUpdate (листинг 6) обновляет характеристики героя на основе сохраненных данных. Он проверяет, сохранены ли обновленные значения для каждой характеристики, и, если да, применяет их.
Листинг 6 – Метод StatsUpdate
public void StatsUpdate(string name)
{

    if (PlayerPrefs.GetFloat(name + "Range") != 0f)
    {
        range = PlayerPrefs.GetFloat(name + "Range");
    }

    if (PlayerPrefs.GetInt(name + "Damage") != 0)
    {
        damage = PlayerPrefs.GetInt(name + "Damage");
    }

    if (PlayerPrefs.GetFloat(name + "FireRate") != 0)
    {
        fireRate = PlayerPrefs.GetFloat(name + "FireRate");
    }

    if (PlayerPrefs.GetFloat(name + "ExplosiveRadius") != 0)
    {
        explosiveRadius = PlayerPrefs.GetFloat(name + "ExplosiveRadius");
    }

    if (PlayerPrefs.GetFloat(name + "Cooldown") != 0)

    {
        skillTime = PlayerPrefs.GetFloat(name + "Cooldown");
    }   
}

Класс GunnerTurret наследует все свойства и методы базового класса Turret, добавляя к ним уникальные способности и механики, такие как активация и использование специальных умений.
Метод Start вызывается перед первым обновлением объекта. Здесь настраивается повторяющийся вызов метода UpdateTarget для обновления цели каждые 0,5 секунды, обновляются характеристики героя и подписка на событие активации умения.
Метод Update (листинг 7) обновляет состояние героя каждый кадр. Он проверяет активацию умения, уменьшает время перезарядки умения и обрабатывает поворот героя и стрельбу по цели, аналогично базовому классу.

Листинг 7 – Метод Update класса GunnerTurret
void Update()
{
    if (isSkillActivated & Input.GetMouseButtonDown(0) & skillCooldown <= 0)
    {
        UseSkill();
    }
    skillCooldown -= Time.deltaTime;
    if (target == null)
    {
        return;
    }
    Vector3 dir = target.position - transform.position;
    Quaternion toRotation = Quaternion.LookRotation(Vector3.forward, dir);
    partToRotate.transform.rotation = Quaternion.RotateTowards(partToRotate.transform.rotation, toRotation, turnSpeed * Time.deltaTime);
    float scaleX = Mathf.Sign(dir.x);
    transform.localScale = new Vector3(scaleX, 1f, 1f);
    if (fireCountdown <= 0f)
    {
        Shoot();
        fireCountdown = 1f / fireRate;
    }
    fireCountdown -= Time.deltaTime;  
}

Метод UseSkill (листинг 8) активирует специальное умение героя. Он создает объект умения, направляет его в сторону указателя мыши и настраивает параметры урона. После активации умения начинается его перезарядка. Также имеется авто удаление объекта спустя некоторое время, чтобы не нагружать сцену, после того как пуля улетит за край экрана. 

Листинг 8 – Метод UseSkill класса GunnerTurret
public void UseSkill()
{
    Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
    Vector2 direction = (mousePosition - (Vector2)transform.position).normalized;
    GameObject skillGO = Instantiate(skillPrefab, firePoint.position, Quaternion.identity);
    GunnerSkill skill = skillGO.GetComponent<GunnerSkill>();
    if (skill != null)
    {
        skill.turret = this;
        skill.transform.right = direction;
        skill.damage = 100;
    }
    skillCooldown = skillTime;
    onSkillUse.Invoke(skillTime, 0);
    isSkillActivated = false;
    Destroy(skillGO, 10f);
}

Метод ActivateSkill (листинг 9) проверяет готово ли умение к использованию, и активирует его. Если умение еще перезаряжается, выводится сообщение в лог.

Листинг 9 – Метод ActivateSkill
public void ActivateSkill()
{
    if(skillCooldown <= 0f)
    {
        isSkillActivated = true;
    }
    else
    {
        Debug.Log("Скилл перезаряжается");
    } 
}

Эта модульная архитектура позволяет легко добавлять новых героев с уникальными способностями, что значительно упрощает расширение и обновление игры.
Способности героя сделаны отдельным объектом и вызываются через самого героя. Класс GunnerSkill представляет собой компонент, отвечающий за поведение и действие специального умения героя. Он определяет скорость движения умения, урон, который оно наносит врагам, а также ссылку на героя, от которого произошло использование умения.
В методе Update (листинг 10) каждый кадр происходит перемещение умения вперед по направлению, заданному вектором.

Листинг 10 – Класс GunnerSkill
public class GunnerSkill : MonoBehaviour
{
    public float speed = 10f;
    public int damage = 100;
    public Turret turret;

    private void Update()
    {
        transform.Translate(speed * Time.deltaTime * Vector2.right);
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        Enemy enemy = collision.GetComponent<Enemy>();
        if (enemy != null)
        {
            enemy.TakeDamage(damage, turret);
        }
    }
}

Метод OnTriggerEnter2D вызывается при входе умения в триггерный коллайдер другого объекта. Здесь проверяется, является ли объект, с которым столкнулось умение, вражеским персонажем. Если это так, вызывается метод TakeDamage для нанесения урона врагу.
Этот класс обеспечивает функционал для управления и обработки умения героя, что позволяет создавать разнообразные способности и механики в игре, похожим образом устроен класс турели алхимика, которую мы сейчас рассмотрим.
Класс AlchemistTurret представляет собой специализированную башню-алхимика, основанную на базовом классе Turret. Этот класс включает основные параметры и методы, а также уникальные способности, такие как активация и использование алхимической атаки.
Метод Start вызывается при создании объекта башни. В этом методе происходит инициализация параметров башни, обновление её характеристик, а также установка периодического вызова метода UpdateTarget каждые полсекунды для обновления цели атаки. В методе Start также происходит подписка метода ActivateSkill на событие активации способности в BuildManager, что позволяет башне реагировать на определенные игровые события.
Метод Update (листинг 11) вызывается каждый кадр и выполняет несколько задач. Он проверяет, активирована ли способность, если нажата левая кнопка мыши, а время перезарядки способности равно или меньше нуля, вызывает метод UseSkill. Также метод уменьшает значение времени перезарядки способности. Если у башни нет текущей цели для атаки, метод завершает выполнение. Если же цель есть, метод определяет направление к цели, поворачивает башню к ней и вращает её части в этом направлении. Метод контролирует частоту стрельбы башни и вызывает метод Shoot, если время до следующего выстрела равно или меньше нуля.

Листинг 11 – Метод Update Класса AlchemistTurret
void Update()
{
    if (isSkillActivated & Input.GetMouseButtonDown(0) & skillCooldown <= 0)
    {
        UseSkill();
    }
    skillCooldown -= Time.deltaTime;
    if (target == null)
    {
        return;
    }
    Vector3 dir = target.position - transform.position;
    Quaternion toRotation = Quaternion.LookRotation(Vector3.forward, dir);
    partToRotate.transform.rotation = Quaternion.RotateTowards(partToRotate.transform.rotation, toRotation, turnSpeed * Time.deltaTime);
    float scaleX = Mathf.Sign(dir.x);
    transform.localScale = new Vector3(scaleX, 1f, 1f);
    if (fireCountdown <= 0f)
    {
        Shoot();
        fireCountdown = 1f / fireRate;
    }
    fireCountdown -= Time.deltaTime;
}

Метод UseSkill, который представлен в листинге 12, активирует специальную способность башни-алхимика. Этот метод определяет позицию курсора мыши на экране, создает объект способности в этой позиции и устанавливает параметры созданной способности, такие как урон и ссылка на башню-алхимика. Также метод устанавливает время перезарядки способности, вызывает событие onSkillUse, чтобы уведомить другие части игры об использовании способности, устанавливает флаг isSkillActivated в false и уничтожает объект способности через полсекунды.

Листинг 12 – Метод UseSkill  алхимика
public void UseSkill()
{
    Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
    GameObject skillGO = Instantiate(skillPrefab, mousePosition, Quaternion.identity);
    AlchemistSkill skill = skillGO.GetComponent<AlchemistSkill>();

    if (skill != null)
    {
        skill.turret = this;
        skill.damage = 100;
    }

    skillCooldown = skillTime;
    onSkillUse.Invoke(skillTime, 1);
    isSkillActivated = false;
    Destroy(skillGO,0.5f);
}

Метод ActiveSkill будет активировать способность при равном или меньшем времени перезарядки. В случае ещё перезаряженной способности выводится сообщение в логие о перезаряженной способности, чтобы игроку сообщить состояние способности, этот метод относится к классу Гуннер-Туррет, но немного отличается от метода класса Гуннер-Туррет, но немного похож на метод класса Гуннер-Туррет, но немного похож на метод класса Гуннер-Туррет, но немного похож на метод класса Гуннер-Туррет, но немного похож на метод класса Гуннер-Туррет, но немного похож на метод класса Гуннер-Туррет, но немного похож на метод класса Гуннер-Туррет.
Класс «Алхимик Туррет» расширяет функционал базовых башен, добавив уникальные механизмы и возможности. Это позволяет играть более разнообразно и интересно, позволяя игрокам стратегически применять различные атаки и совершенствовать тактику в соответствии с ситуацией.
Всю систему боевых действий с учетом всех классов и методов можно посмотреть на рис. 8. Такие классы в совместном порядке оказывают помощь в управлении турками в играх, стрельбе, использованию специальных умений и взаимодействиях с противниками.
 
Рисунок 8 - диаграмма классов боевой системы

В ходе разработки боевой системы были учтены основные аспекты, обеспечивающие динамичность и увлекательность игрового процесса. Ключевым этапом разработки стало создание турелей и их уникальных способностей. В частности, класс GunnerTurret, как и AlchemistTurret были подробно проработаны, включая систему активации и использования специальных навыков, что значительно обогатило игровой процесс, но в будущем нашего проекта планируется добавление влияния диегетических принципов, которые мы рассматривали раннее для большего погружения в игровой процесс. Герои способны не только автоматически стрелять по врагам, но и использовать мощный скилл, который игрок может активировать вручную, добавляя элемент стратегии и интерактивности. 
Таким образом, достигнуты поставленные цели по созданию функциональной и увлекательной боевой системы, готовой к интеграции в игровой проект. Следующим этапом станет тестирование на целевой аудитории и внесение окончательных корректировок перед финальным релизом игры.
3.4	Реализация поведения врагов
Враг в игре — это объект, который движется по заданному пути и должен быть уничтожен до достижения конца маршрута и нанести урон жизням игрока. Класс Enemy управляет всеми аспектами поведения врага, включая движение, здоровье и взаимодействие с башнями. В этом разделе мы рассмотрим основные методы и свойства класса Enemy, которые мы разработали во второй главе взаимодействие классов врагов можно увидеть в виде диаграммы классов на рисунке 9, который показывает, как класс EnemySummoner наследуется от класса Enemy. Враги призываются через класс Wave, которым манипулирует класс WaveSpawner, дальше мы рассмотрим, как работает каждый класс отдельно. На данный момент наши враги представляют из себя анимированный объект из нарисованных спрайтов с полоской здоровья над ним, в будущем планируется использовать нарративный интерфейс здоровья, когда спрайт врага будет меняться в зависимости от его текущего здоровья.
 
Рисунок 9 - Диаграмма классов врагов

Класс начинается с объявления переменных, которые определяют начальные и максимальные скорости, здоровье, текущую скорость и путь, по которому движется враг. Переменная canAccelerate указывает, может ли враг ускоряться при получении урона, таким образом мы делаем возможность делать врагов берсерков. Эти параметры позволяют гибко настраивать поведение различных типов врагов.
Метод Start выполняет инициализацию начальных параметров врага. Он устанавливает начальную скорость, находит путь, по которому враг должен двигаться, и задает начальное здоровье. Также метод сохраняет исходные размеры врага и его индикатора здоровья, что пригодится для изменения размера при вращении.
Метод Init используется для инициализации пути и начальной цели врага. Он позволяет задавать точки пути и начальную цель извне, что удобно для повторного использования объекта врага.
Метод TakeDamage в листинге 13 обрабатывает получение урона врагом. Он уменьшает здоровье врага на заданное количество, обновляет индикатор здоровья и проверяет, умер ли враг. Если здоровье врага падает до нуля, вызывается метод Die, который уничтожает врага. Если враг может ускоряться, его скорость увеличивается по мере уменьшения здоровья.

Листинг 13 – TakeDamage метод класса Enemy
public void TakeDamage(int amount, Turret damageowner)
{
    health -= amount;
    healthBar.fillAmount = health / startHealth;


    if (health <= 0)
    {
        switch (damageowner.GetType().Name)
        {
            case nameof(GunnerTurret):
                damageowner.exp.AddExp("experienceGunnerTurret", 10);
                break;
            case nameof(AlchemistTurret):
                damageowner.exp.AddExp("experienceAlchemistTurret", 10);
                break;
            case nameof(CommanderTurret):
                damageowner.exp.AddExp("experienceCommanderTurret", 10);
                break;
        }
        Die();
    }
    else if (canAccelerate)
    {
        float newSpeed = startSpeed + (maxSpeed - startSpeed) * (1 - health / startHealth);
        speed = Mathf.Clamp(newSpeed, startSpeed, maxSpeed);
    }
}

Метод обновления, представленный на рис.23, вызывается каждым кадром и принимает участие в движении противника по дороге. Он устанавливает направление на текущую цель, передвигает врага в это направление, проверяет, дошел ли враг до следующей цели. Если противник достигнет точки, то вызывается метод «GetNextPoint», который обновляет цель на следующий трек. Также метод обрабатывает поворот противника по направлению движения для обеспечения корректного отображения индикатора здравоохранения.
Листинг 14 – Метод Update класса Enemy
protected virtual void Update()
{
    Vector3 dir = target.position - transform.position;
    transform.Translate(speed * Time.deltaTime * dir.normalized, Space.World);

    if (Vector3.Distance(transform.position, target.position) <= 0.1f)
    {
        GetNextWaypoint();
    }

    // Поворачиваем врага
    if (dir.x < 0)
    {
        transform.localScale = new Vector3(-originalScale.x, originalScale.y, originalScale.z);
        healthBar.rectTransform.localScale = new Vector3(-originalHealthScale.x, originalHealthScale.y, originalHealthScale.z);
    }
    else
    {
        transform.localScale = originalScale;
        healthBar.rectTransform.localScale = originalHealthScale;
    }
}

Метод GetNetWayPoint обновляет текущую цель врага на следующий путь. Если противник достигает конца своего пути, возникает метод EndPath, который снижает количество жизни игрока, уничтожает противника.
Метод EndPath обрабатывает окончание пути противника. Он снижает количество жизни игрока на одну и разрушает объект противника, метод Die разрушает объект противника и выводит его из игрового процесса.
Теперь посмотрим, как в нашем матче призывают враги. Класс Ваве - это структура, которая описывает одну и ту же волну противников. В нем содержится список противников, которые призываются в этой волне и параметр TimeBetweenSpawn, который определяет интервал между появлениями отдельных противников.
Основным классом WaveSpawner является управление последовательными призывами волн противника. Метод Start запускает игру, установив начальное время и запуская корутину для начала процесса удаления таймапа. Также в методе Start устанавливается первый таймер числа до того, как появится первая волна противника. Метод обновления листинга 15 охватывает основные игровые циклы. Он снижает таймер отсчета числа до начала последующей волны, проверяет, достигнет ли число нуля таймера. В случае, если таймер равно нулю, а волны остались, начинается процесс призыва противников текущего волнового движения. Визуально на экране отображается таймер, используя текстовое поле waveCountDown Text.
Листинг 15 – Метод Update класса WaveSpawner
private void Update()
{
    if (countdown <= 0f && waveIndex < waves.Length)
    {
        StartCoroutine(SpawnWave(waves[waveIndex]));
        countdown = timeBetweenWaves;

    }
    countdown -= Time.deltaTime;
    if (waveIndex >= waves.Length)
    {
        waveCountDownText.text = "";
        if (AllEnemiesDefeated()) {
            endGame.SetActive(true);
            Time.timeScale = 0f;
        }    
    }
    else
    {
        waveCountDownText.text = Mathf.Round(countdown).ToString();
    }
}

Корутина SpawnWave(Wave wave), код которой представлен на листинг 16, отвечает за процесс призыва врагов для одной волны. Он увеличивает индекс текущей волны (waveIndex) и поочередно создает врагов из списка префабов с заданным интервалом.

Листинг 16 – Корутина SpawnWave
IEnumerator SpawnWave(Wave wave)
{
    waveIndex++;

    foreach (GameObject enemyPrefab in wave.enemyPrefabs)
    {
        SpawnEnemy(enemyPrefab);
        yield return new WaitForSeconds(wave.timeBetweenSpawn);
    }      
}

Метод SpawnEnemy(GameObject enemyPrefab) создает экземпляр врага на заданной точке призыва (spawnpoint), используя метод Instantiate.
Метод AllEnemiesDefeated() проверяет, все ли враги уничтожены. Он проходит по всем врагам на сцене и, если находит хотя бы одного живого врага, возвращает false. Если все враги уничтожены, метод возвращает true.
Корутина StartTilemapEraser(float delayTime) запускает процесс удаления тайлмапа через заданный промежуток времени. Этот процесс инициализируется в начале игры и запускает метод StartEraser из класса TilemapEraser после задержки, которая соответствует времени начала старта первой волны. Код этой корутины представлен на листинг 17.

Листинг 17 – часть кода класса WaveSpawner
void SpawnEnemy(GameObject enemyPrefab)
{
    Instantiate(enemyPrefab, spawnpoint.position, spawnpoint.rotation);
}

bool AllEnemiesDefeated()
{
    GameObject[] enemies = GameObject.FindGameObjectsWithTag("Enemy");
    foreach (GameObject enemy in enemies)
    {
        if (enemy != null)
            return false;
    }
    return true;
}

IEnumerator StartTilemapEraser(float delayTime)
{
    yield return new WaitForSeconds(delayTime);

    tilemapEraser.StartEraser();
}

Таким образом, этот скрипт эффективно управляет процессом спавна врагов, обеспечивая последовательное появление волн и создавая динамическое игровое окружение.
Босс в нашей игре, представленный классом EnemySummoner, добавляет дополнительный уровень сложности, регулярно призывая новых врагов. Этот класс наследуется от базового класса Enemy и расширяет его функционал, добавляя возможность спавна подконтрольных ему врагов.
Метод Update() обновляется каждый кадр и вызывается метод Update() базового класса Enemy. Здесь дополнительно ничего не происходит, но это позволяет сохранить возможность расширения в будущем.
Корутина SummonEnemies() отвечает за процесс вызова врагов. Пока количество вызванных врагов не достигнет максимума (maxEnemies), он будет создавать новых врагов через заданный интервал времени (summonInterval), код самой корутины представлен в листинге 18.
Внутри корутины создается экземпляр врага (enemyPrefab), после чего ему передаются waypoints и текущая цель, чтобы он мог правильно двигаться по игровому полю, по тем же точкам что и сам босс.

Листинг 18 – корутина SummonEnemies
IEnumerator SummonEnemies()
{
    while (enemiesSpawned < maxEnemies)
    {
        Enemy enemy = Instantiate(enemyPrefab, transform.position, Quaternion.identity);
        summonWaypoints = points;
        summonTarget = target;
        summonWaypointIndex = waypointIndex;
        enemy.Init(summonWaypoints, summonTarget, summonWaypointIndex);
        enemiesSpawned++;
        yield return new WaitForSeconds(summonInterval);
    }
}

Класс EnemySummoner добавляет уникальную механику в игру, делая босса более сложным и интересным для игроков. Способность босса вызывать новых врагов создает дополнительные вызовы для игрока, требуя от него более стратегического подхода к защите и атаке. А первый босс в нашей игре — это обычный моб, с большими характеристиками, которые балансирует наш геймдизайнер. 
Таким образом, достигнуты поставленные цели по созданию системы поведения врагов, готовой к интеграции в игровой проект. Следующим этапом станет тестирование на целевой аудитории и внесение окончательных корректировок перед будущими этапами игры. На стадии разработки, мы представляли нашу игру на фестивале "GameStart", где получили отзывы по нашему проекту, которые были в основном положительные, но были и те, которые указывали на некоторые недоработки в нашем проекте, все эти отзывы мы учтем в будущем нашего проекта и исправим все недочеты, на которые нам указала наша целевая аудитория. По задумке нашего проекта, как это было сказано ранее будет интегрирована система диегетического интерфейса во врагов, которая поможет игроку больше погрузится в мир игры и прочувствовать атаки и их силу игроку намного лучше.
